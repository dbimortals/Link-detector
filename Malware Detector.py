import requests
import re

# Constants
SAFE_BROWSING_API_KEY = 'AIzaSyA45pUq6Aut9L2C-KywXT0c-L-LD7UEGK0'
SAFE_BROWSING_API_URL = 'https://safebrowsing.googleapis.com/v4/threatMatches:find?key=AIzaSyA45pUq6Aut9L2C-KywXT0c-L-LD7UEGK0' + SAFE_BROWSING_API_KEY

# Define a function to check if a URL is potentially malicious
def check_url_with_google_safebrowsing(url):
    headers = {
        'Content-Type': 'application/json',
    }
    
    data = {
        "client": {
            "clientId": "yourcompany",
            "clientVersion": "1.0.0"
        },
        "threatInfo": {
            "threatTypes": ["MALWARE", "SOCIAL_ENGINEERING"],
            "platformTypes": ["ANY_PLATFORM"],
            "threatEntryTypes": ["URL"],
            "threatEntries": [
                {"url": url}
            ]
        }
    }
    
    response = requests.post(SAFE_BROWSING_API_URL, headers=headers, json=data)
    result = response.json()
    
    if 'matches' in result:
        return True
    return False

# Define a basic heuristic function to check URL patterns
def heuristic_check(url):
    # Example patterns that might indicate suspicious behavior
    suspicious_patterns = [
        r'\.exe$',               # Executable files
        r'\.zip$',               # Zip files
        r'login\.php',           # Login pages that might be fake
        r'\/admin\/?',           # Admin login pages
        r'phishing',             # Common phishing term
        r'\d{4,}',               # URLs with long sequences of digits
       #r'com',
    ]
    
    for pattern in suspicious_patterns:
        if re.search(pattern, url):
            return True
    return False

# Main function to analyze a URL
def analyze_url(url):
    print(f"Analyzing URL: {url}")
    
    # Check with Google Safe Browsing API
    is_malicious = check_url_with_google_safebrowsing(url)
    if is_malicious:
        print("Warning: URL is known to be malicious according to Google Safe Browsing.")
        return
    
    # Perform heuristic checks
    if heuristic_check(url):
        print("Warning: URL matches suspicious patterns.")
    else:
        print("URL appears to be safe based on the checks.")

if __name__ == "__main__":
    # Example URL to analyze
    url_to_check = "https://acm-cry-sink-inspector.trycloudflare.phishing"
    analyze_url(url_to_check)
